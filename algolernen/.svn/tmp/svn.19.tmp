package uebung12.aufgabe01;

import java.io.IOException;

import stuff.SpeakableString;

// Aufgabe 1: 
// Implementieren Sie zu einem gewichteten Graphen auf Basis eine 
// Adjazenzlistenimplementierung(!!!!) die Berechnung eines minimalen 
// Spannbaums. Verwenden Sie dazu eine Prioritätenheap. Zeigen Sie das Ergebnis 
// grafisch an. Testen (Laufzeitmessung) Sie Ihre Datenstruktur mit einem Graphen,
// der mindestens 1000 Knoten und 5000 Kanten hat. 

public class Aufgabe01 {
	final static int anzahlElemente = 10;

	Aufgabe01() throws IOException {
		GraphList gl = new GraphList(true);
		SpeakableString s = new SpeakableString(7);
		gl.newNode("Hamburg");
		gl.newNode("Bremen");
		gl.newNode("Bremerhaven");
		gl.newNode("Lemgo");
		gl.newNode("Aurich");
		gl.newNode("Westerland");
		System.out.println(gl.mRootNames.get("Hamburg").mIdent + " --> Hamburg");
		System.out.println(gl.mRootNames.get("Bremen").mIdent + " --> Bremen");
		System.out.println(gl.mRootNames.get("Bremerhaven").mIdent + " --> Bremerhaven");
		System.out.println(gl.mRootNames.get("Lemgo").mIdent + " --> Lemgo");
		System.out.println(gl.mRootNames.get("Aurich").mIdent + " --> Aurich");
		System.out.println(gl.mRootNames.get("Westerland").mIdent + " --> Westerland");
		
		gl.addEdge("Hamburg", "Bremen", 2);
		gl.addEdge("Hamburg", "Lemgo", 4);
		gl.addEdge("Hamburg", "Bremerhaven", 3);
		gl.addEdge("Bremerhaven", "Bremen", 1);
		gl.addEdge("Bremerhaven", "Lemgo", 7);
		gl.addEdge("Lemgo", "Aurich", 10);
		gl.addEdge("Lemgo", "Hamburg", 13);
		gl.addEdge("Aurich", "Bremen", 4);
		gl.addEdge("Westerland", "Hamburg", 4);
		gl.addEdge("Westerland", "Aurich", 17);
		
//		gl.newNode("A");
//		gl.newNode("B");
//		gl.newNode("C");
//		gl.newNode("D");
//		gl.newNode("E");
//		gl.newNode("F");
//		gl.newNode("G");
//		gl.newNode("H");
//		gl.addEdge("A", "B", 9);
//		gl.addEdge("A", "C", 2);
//		gl.addEdge("A", "E", 18);
//		gl.addEdge("B", "C", 5);
//		gl.addEdge("B", "D", 3);
//		gl.addEdge("D", "E", 0);
//		gl.addEdge("E", "F", 3);
//		gl.addEdge("F", "G", 2);
//		gl.addEdge("F", "H", 5);
		
//		Graph_Printer printer = new Graph_Printer(false, false);
//
//		for(int i = 0; i < anzahlElemente-1; ++i)
//			gl.newNode(s.getNext());
//
//		for(int i = 0; i < 2 * anzahlElemente-1; ++i) {
//			String start = gl.mRevRootNames.get(gl.mRoots.get(i % anzahlElemente));
//			String end = gl.mRevRootNames.get(gl.mRoots.get(((int) (Math.random() * anzahlElemente))));
//			int randWeight = (int) (Math.random() * 100);
//
//			gl.addEdge(start, end, randWeight);
//		}

//		gl.print();
		
//		gl.getMySpanBaumBitch("A");
//		float start = System.currentTimeMillis();
//		printer.print("Graph", gl);
		GraphList sb = gl.getMinSpanTree("Hamburg");
		Graph_Printer printer2 = new Graph_Printer(false, false);
		printer2.print("SpannBaum", sb);
		
//		System.out.println("das hat " + (System.currentTimeMillis() - start) + " ms gedauert");

	}

	public static void main(String[] args) throws IOException {
		new Aufgabe01();
	}
}