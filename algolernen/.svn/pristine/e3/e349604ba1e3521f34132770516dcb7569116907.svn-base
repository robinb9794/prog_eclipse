package uebung06;

import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JComponent;
import javax.swing.JFrame;

// Aufgabe 1: 
// Optimieren Sie Ihre Implementierung zu Übung 2 Aufgabe 2, indem Sie für das 
// Finden von ähnlichen Farben die aus der Vorlesung vorgestellte 
// mehrdimensionale Approximation verwenden. Verwenden Sie für das Sortieren 
// den Quicksortoder binäre Bäume. 

public class Aufgabe01 extends JFrame {

	final int w = 800;
	final int h = 700;

	Aufgabe01() throws Exception {
		setLayout(new GridLayout(2, 1));
		setSize(w, h);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		
		addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e){
				System.exit(0);
			}
		});
		
		final Image image = new DateiAuswahl().bildAuswahl();

		MediaTracker mt = new MediaTracker(this);
		mt.addImage(image, 0);
		mt.waitForAll();

		add(new JComponent() {
			public void paintComponent(Graphics g) {
				g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
			}
		});
		
		setVisible(true);
		
		ImageColorReduction icr = new ImageColorReduction();
		long time = System.currentTimeMillis();
		final Image img = icr.imageColorReduction(image, 0.8, this);
		System.out.println("das hat "+(System.currentTimeMillis()-time)+" ms gedauert...");
		
		add(new JComponent() {
			public void paintComponent(Graphics g) {
				g.drawImage(img, 0, 0, getWidth(), getHeight(), this);
			}
		});
		
		validate();
		repaint();
	}

	public static void main(String[] args) throws Exception {
		new Aufgabe01();
	}
}
