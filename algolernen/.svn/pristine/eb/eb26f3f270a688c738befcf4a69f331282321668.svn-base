package uebung12.extra01;

import java.util.LinkedList;

public class GraphMatrix {
	public GraphMatrix(int iNrOfNodes, boolean bIsDirected) {
		IS_DIRECTED = bIsDirected;
		m_Matrix = new boolean[iNrOfNodes][iNrOfNodes];
	}

	public void addEdge(int i1, int i2) {
		m_Matrix[i1][i2] = true;
		if(!IS_DIRECTED)
			m_Matrix[i2][i1] = true;
	}

	public void search(int iNode, boolean bDepthFirst) {
		boolean[] visited = new boolean[m_Matrix.length];
		for(int i = 0; i < m_Matrix.length; ++i)
			visited[i] = false;
		LinkedList<Integer> nodes2visit = new LinkedList<>();
		nodes2visit.add(iNode);
		visited[iNode] = true;
		while(!nodes2visit.isEmpty()) {
			final int CURRNODE = bDepthFirst ? nodes2visit.removeLast() : nodes2visit.removeFirst();
			System.out.println(CURRNODE);
			for(int i = 0; i < m_Matrix.length; ++i) {
				if(m_Matrix[CURRNODE][i] && !visited[i]) {
					visited[i] = true;
					nodes2visit.add(i);
				}
			}
		}
	}
	
	/**
	 * Rekursiver Durchlauf zum zählen der Kanten, sofern ein Weg von "start" zu "end"
	 * existiert. Kausuraufgabe von 2011/12 2ter Versuch!
	 * 
	 * Methode zum Aufrufen. Bekommt den Start-Knoten und den Ziel-Knoten übergeben.
	 * 1. Legt ein boolsches Array an, um sich besuchte Knoten zu merken.
	 * 2. Ruft als Rückgabe die rekursive Hilfs-Methode mit den folgenden Parametern auf:
	 * 	start   - Start-Knoten
	 * 	end	    - Ziel-Knoten
	 *  visited - Array mit bereits besuchten Knoten
	 *  len     - Die bereits gezählten Kanten vom Start-Knoten
	 */
	public int shortestPath(int start, int end) {
		boolean[] visited = new boolean[m_Matrix.length];
		return shortestPath(start, end, visited, 0);
	}
	
	/**
	 * Ist der Start-Knoten gleich dem Ziel-Knoten, gebe die bereits gefundenen Kanten (len) zurück.
	 * In allen anderen Fällen:
	 * 	Prüfe ob der Start-Knoten bereits besucht wurde, wenn ja gebe eine GROSSE Zahl zurück.
	 * 	Wurde der Knoten noch nicht besucht, vermerke ihn im Array.
	 *  Lege eine lokale Variable way an, die sich den minimalsten Weg zum nächsten Knoten merkt.
	 *  Für jeden Knoten der vom Start-Knoten aus erreichbar ist, lege eine lokale Variable an, 
	 *  welche sich den minimalen Weg merkt und rufe die Methote erneut rekursiv auf. Vergleich das Ergebnis mit
	 *  der Variable way und speichere das kleinere Ergebnis in dieser ab. Gebe die Variable way zurück.
	 */
	private int shortestPath(int start, int end, boolean[] visited, int len) {
		if(start == end)
			return len;
		else {
			if(visited[start])
				return Integer.MAX_VALUE;
			visited[start] = true;
			int way = Integer.MAX_VALUE;
			for(int i = 0; i < m_Matrix.length; ++i) {
				if(m_Matrix[start][i]) {
//					int mylen = len + 1;
					way = Math.min(shortestPath(i, end, visited, len+1), way);
				}
			}
			return way;
		}
	}

	public void print() {
		System.out.print("  ");
		for(int i = 0; i < m_Matrix.length; ++i) {
			System.out.print(" " + i + " ");
		}
		System.out.println();
		for(int i = 0; i < m_Matrix.length; ++i) {
			System.out.print(i + " ");
			for(int j = 0; j < m_Matrix.length; ++j) {
				System.out.print(m_Matrix[i][j] ? "[x]" : "[ ]");
			}
			System.out.println();
		}
		System.out.println();
	}

	private boolean[][] m_Matrix;
	private final boolean IS_DIRECTED;
}