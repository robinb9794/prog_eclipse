package zusatz.PatriciaTree;

import java.util.Vector;

public class PatriciaTree<K extends Comparable<K>> {
	public PatriciaTree() {
		m_Root = null;
	}
	
	public boolean left(K key, int bitPos) {
		if(key instanceof Character) {
			char c = (Character) key;
			return (c & (1 << bitPos)) == 0;
		}
		else if(key instanceof String) {
			String str = (String) key;
			int cPos = bitPos/8;
			char c = str.length() > cPos ? str.charAt(cPos) : '\0';
			return (c & (1 << bitPos%8)) == 0;
		}
		else if(key instanceof Integer) {
			int i = (Integer) key;
			return (i & (1 << bitPos)) == 0;
			
		}
		else {
			return false;
		}
	}

	public boolean insert(K key) {
		if(m_Root == null) {
			m_Root = new Node<K>(key, 0);
			return true;
		}

		int lastBitPos = -1;
		Node<K> node = m_Root;
		Node<K> dad = null;

		while(node != null && lastBitPos < node.m_BitPos) {
			lastBitPos = node.m_BitPos;
			dad = node;
			node = left(key, node.m_BitPos) ? node.m_Left : node.m_Right;
		}

		int newBitPos = 0;
		if(node == null) {
			newBitPos = dad.m_BitPos + 1;
		} else if(node.m_Key.compareTo(key) == 0) {
			return false;
		} else {
			if(key instanceof String) {
				for(int i=0; ((String) key).charAt(i)==((String) node.m_Key).charAt(i); ++i)
					newBitPos += 8;
			}
			while(left(key, newBitPos) == left(node.m_Key, newBitPos))
				++newBitPos;
			
			lastBitPos = -1;
			while(node != null && lastBitPos < node.m_BitPos && node.m_BitPos < newBitPos) {
				lastBitPos = node.m_BitPos;
				dad = node;
				node = left(key, node.m_BitPos) ? node.m_Left : node.m_Right;
			}
		}

		Node<K> newNode = new Node<>(key, newBitPos, node);
		System.out.println(newNode);
		if(left(key, dad.m_BitPos))
			dad.m_Left = newNode;
		else
			dad.m_Right = newNode;
		return true;
	}

	public boolean searchRec(K key) {
		return searchRec(m_Root, key);
	}

	private boolean searchRec(Node<K> node, K key) {
		if(node == null)
			return false;
		if(node.m_Key.compareTo(key) == 0)
			return true;
		Node<K> tmp = left(key, node.m_BitPos) ? node.m_Left : node.m_Right;
		if(tmp.m_BitPos > node.m_BitPos)
			return searchRec(tmp, key);
		return false;
	}

	public boolean search(K key) {
		Node<K> tmp = m_Root;
		int lastBitPos = -1;
		while(tmp != null && lastBitPos < tmp.m_BitPos && Integer.MAX_VALUE > tmp.m_BitPos) {
			if(tmp.m_Key.compareTo(key) == 0)
				return true;
			lastBitPos = tmp.m_BitPos;
			tmp = left(key, lastBitPos) ? tmp.m_Left : tmp.m_Right;
		}
		return false;
	}

	public boolean remove(K c) {
		return false;
	}

	public int maxDepth() {
		return depth(m_Root, -1, true);
	}

	public int minDepth() {
		return depth(m_Root, -1, false);
	}

	private int depth(Node<K> node, int lastBitPos, boolean max) {
		if(node == null)
			return 0;
		if(lastBitPos < node.m_BitPos)
			return max ? Math.max(depth(node.m_Left, node.m_BitPos, max), depth(node.m_Right, node.m_BitPos, max)) + 1:
						 Math.min(depth(node.m_Left, node.m_BitPos, max), depth(node.m_Right, node.m_BitPos, max)) + 1;
		else
			return 0;
	}

	public K getGoldNode() {
		return getGoldNode(m_Root, -1);
	}

	private K getGoldNode(Node<K> n, int i) {
		if(n == null || n.m_BitPos <= i)
			return null;
		else if(n.isGold())
			return n.m_Key;
		else {
			K k = getGoldNode(n.m_Left, n.m_BitPos);
			if(k != null)
				return k;
			else
				return getGoldNode(n.m_Right, n.m_BitPos);
		}
	}

	public int countNodes() {
		return countNodes(m_Root, -1);
	}

	private int countNodes(Node<K> n, int i) {
		if(n == null || n.m_BitPos <= i)
			return 0;
		else
			return 1 + countNodes(n.m_Left, n.m_BitPos) + countNodes(n.m_Right, n.m_BitPos);
	}

	public int countBackLinks() {
		return countBackLinks(m_Root);
	}

	private int countBackLinks(Node<K> node) {
		int temp = 0;
		if(node.m_Left != null && node.m_Left.m_BitPos < node.m_BitPos) {
			temp += 1;
		}
		if(node.m_Right != null && node.m_Right.m_BitPos < node.m_BitPos) {
			temp += 1;
		}
		if(node.m_Left != null && node.m_Left.m_BitPos > node.m_BitPos) {
			temp = temp + countBackLinks(node.m_Left);
		}
		if(node.m_Right != null && node.m_Right.m_BitPos > node.m_BitPos) {
			temp = temp + countBackLinks(node.m_Right);
		}
		return temp;
	}

	public Vector<K> convertToVector() {
		Vector<K> vRet = new Vector<>();
		convertToVector(m_Root, vRet, -1);
		return vRet;
	}

	private void convertToVector(Node<K> n, Vector<K> v, int i) {
		if(n != null && i < n.m_BitPos) {
			convertToVector(n.m_Left, v, n.m_BitPos);
			v.add(n.m_Key);
			convertToVector(n.m_Right, v, n.m_BitPos);
		}
	}

	Node<K> m_Root;
}