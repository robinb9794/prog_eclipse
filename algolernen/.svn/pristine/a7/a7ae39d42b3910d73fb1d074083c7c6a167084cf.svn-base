package uebung04.aufgabe02;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;

import javax.swing.JFrame;

// Aufgabe 2: 
// Verwenden Sie Ihre obige Methode, um ein Bild mit einer Gitterstruktur zu 
// erzeugen, das einen Farbverlauf aufzeigt. Dabei haben die vier Eckpunkte 
// unterschiedliche Farben, d.h. für die Farben, die nicht in den Ecken starten bzw. 
// enden müssen noch erst die Start- und Endfarben gemäß des Farbverlaufs 
// berechnet werden. Beispiel für die Farbenrot (oben links), grün (oben rechts), 
// blau (unten links) und gelb (unten rechts).

public class Aufgabe02 extends JFrame {

	Aufgabe02(final int c1, final int c2, final int c3, final int c4) {

		setSize(400, 400);

		setDefaultCloseOperation(DISPOSE_ON_CLOSE);

		add(new Component() {
			public void paint(Graphics g) {

				// V
				for (int x = 0; x <= getWidth(); x += 5) {
					drawLine(
							g,
							x,
							0,
							x,
							getHeight(),
							getColor(x, 0, c1, c2, c3, c4, getWidth(),
									getHeight()),
							getColor(x, getHeight(), c1, c2, c3, c4,
									getWidth(), getHeight()));
				}

				// H
				for (int y = 0; y <= getWidth(); y += 5) {
					drawLine(
							g,
							0,
							y,
							getWidth(),
							y,
							getColor(0, y, c1, c2, c3, c4, getWidth(),
									getHeight()),
							getColor(getWidth(), y, c1, c2, c3, c4, getWidth(),
									getHeight()));
				}
			}
		});
		
		setVisible(true);
	}

	public static int getColor(int x, int y, int c1, int c2, int c3, int c4,
			int W, int H) {

		return colorShuffle(colorShuffle(c1, c2, x / W * 100),
				colorShuffle(c3, c4, x / W * 100), y * 100 / H);
	}

	public static void drawLine(Graphics g, int x0, int y0, int x1, int y1,
			int cStart, int cEnd) {

		final int dx = Math.abs(x0 - x1);
		final int dy = Math.abs(y0 - y1);
		final int sgnDx = x0 < x1 ? 1 : -1;
		final int sgnDy = y0 < y1 ? 1 : -1;
		int shortD, longD, incXshort, incXlong, incYshort, incYlong;
		if (dx > dy) {
			shortD = dy;
			longD = dx;
			incXlong = sgnDx;
			incXshort = 0;
			incYlong = 0;
			incYshort = sgnDy;
		} else {
			shortD = dx;
			longD = dy;
			incXlong = 0;
			incXshort = sgnDx;
			incYlong = sgnDy;
			incYshort = 0;
		}
		int d = longD / 2, x = x0, y = y0;

		double fullLength = Point.distance(x0, y0, x1, y1);

		for (int i = 0; i <= longD; ++i) {
			double part = Point.distance(x0, y0, x, y);
			double tempP = (part / fullLength) * 100;

			g.setColor(new Color(colorShuffle(cStart, cEnd, (int) tempP)));
			g.drawLine(x, y, x, y);
			x += incXlong;
			y += incYlong;
			d += shortD;
			if (d >= longD) {
				d -= longD;
				x += incXshort;
				y += incYshort;
			}
		}

	}

	// Die colorShuffle-Methode nutzt die singleShuffle-Methode um die
	// einzelnen Farbanteile red, green, blue aus zwei uebergebenener Farben zu
	// extrahieren, um einen Mischwert in Abhaengigkeit eines Prozentsatzes p zu
	// generieren und gibt diesen zurueck
	static int colorShuffle(int i1, int i2, int p) {
		int red = singleShuffle((i1 >> 16) & 255, (i2 >> 16) & 255, p);
		int green = singleShuffle((i1 >> 8) & 255, (i2 >> 8) & 255, p);
		int blue = singleShuffle((i1) & 255, (i2) & 255, p);
		return (255 << 24) | (red << 16) | (green << 8) | blue;
	}

	// Die singleShuffle-Methode gibt den Mischwert zweier Ganzzahlen in
	// Abhaengigkeit eines Prozentsatzes zurueck
	static int singleShuffle(int i1_part, int i2_part, int p) {
		return i1_part + (i2_part - i1_part) * p / 100;
	}

	public static void main(String[] args) {

		new Aufgabe02(Color.BLACK.getRGB(), Color.GREEN.getRGB(),
				Color.MAGENTA.getRGB(), Color.BLUE.getRGB());

	}
}