package uebung12.aufgabe03;

import java.io.IOException;

// Aufgabe 3: 
// Schreiben Sie eine Methode, die zwei Knoten k1 und k2
// übergeben bekommt und true zurück gibt, wenn es einen Weg von k1
// zu k2 gibt. Wenn es einen solchen Weg gibt, soll er farbig in 
// dem Graphen markiert werden. 

public class Aufgabe03 {
	final static int anzahlElemente = 10;

	Aufgabe03() throws IOException {
		GraphList gl = new GraphList(false);
		gl.newNode("Hamburg");
		gl.newNode("Bremen");
		gl.newNode("Bremerhaven");
		gl.newNode("Lemgo");
		gl.newNode("Aurich");
		gl.newNode("Westerland");		
		gl.addEdge("Hamburg", "Bremen", 2);
		gl.addEdge("Hamburg", "Lemgo", 4);
		gl.addEdge("Hamburg", "Bremerhaven", 3);
		gl.addEdge("Bremerhaven", "Bremen", 1);
		gl.addEdge("Bremerhaven", "Lemgo", 7);
		gl.addEdge("Lemgo", "Aurich", 10);
		gl.addEdge("Lemgo", "Hamburg", 13);
		gl.addEdge("Aurich", "Bremen", 4);
		gl.addEdge("Westerland", "Hamburg", 4);
		gl.addEdge("Westerland", "Aurich", 17);

		gl.print();
		getPathInfo("Hamburg", "Lemgo", gl);
		getPathInfo("Hamburg", "Aurich", gl);
		getPathInfo("Lemgo", "Westerland", gl);
//		getPathInfo("Aurich", "Bremen", gl);
//		getPathInfo("Westerland", "Bremerhaven", gl);
		
		Graph_Printer printer = new Graph_Printer(false, false);
//		gl.getMySpanBaumBitch("Lemgo");
//		System.out.println("Maximale Zusammenhangskomponenten: " + gl.maxConnectedComponent());
//		float start = System.currentTimeMillis();
		printer.print("Graph", gl);
//		System.out.println("das hat " + (System.currentTimeMillis() - start) + " ms gedauert");

	}
	
	public static void getPathInfo(String from, String to, GraphList g) {
		System.out.println(from + " -> " + to + ": ");
		System.out.println("Erreichbarkeit:    " + g.isReachable(from, to));
		System.out.println("Kürzester Weg:     " + g.shortestPath(from, to));
		System.out.println("Minimalste Kosten: " + g.shortestCheapestPath(from, to));
		System.out.println();
	}
	
	public static void main(String[] args) throws IOException {
		new Aufgabe03();
	}
}