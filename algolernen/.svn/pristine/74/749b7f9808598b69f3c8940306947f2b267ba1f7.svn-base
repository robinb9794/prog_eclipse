package uebung09;

import java.io.IOException;

import stuff.SpeakableString;
import uebung09.UniqueNumberOperator.mode;

// Aufgabe 1: 
// Implementieren Sie für Ihren Rot-Schwarz Baum aus Übung 8 Aufgabe 1 die remove 
// Methode ohne Verwendung der NodeHandlerKlasse. 
// Wenden Sie Ihre Implementierung auf die folgende Reihenfolge von Schlüsseln 
// an und lassen Sie sich die entstehende Baumstruktur ausgeben. 
// 13 –7 34 3 5 12 9 -200 45 14 -1 15 -6 18 -9 44 
// Danach löschen Sie die Schlüssel 
// 13 -7 45 12 -1 
// und lassen sich nach jedem Löschen immer wieder die Baumstruktur ausgeben. 

public class Aufgabe01 {
	int anzahl = 50;

	public Aufgabe01() throws IOException, InterruptedException {
		RedBlackTree_noNH_wM<Integer, String> redBlackTree = new RedBlackTree_noNH_wM<Integer, String>();
		TreePrinter<Integer, String> treePrinter = new TreePrinter<Integer, String>(false, false);
		SpeakableString s = new SpeakableString(3);

		int[] M = { 13, -7, 34, 3, 5, 12, 9, -200, 45, 14, -1, 15, -6, 18, -9, 44, 58, 97, 77, 78, 73, 87, 85, 63, 67, 18 };
		for(int i = 0; i < M.length; ++i) {
			redBlackTree.insert(M[i], s.getNext());
		}
		
		System.out.println("isSorted: " + redBlackTree.isSorted());

		// UniqueNumberOperator testDaten = new UniqueNumberOperator(
		// anzahl,mode.writeFile);
		// for (int i = 0; i < anzahl / 2; i++) {
		// redBlackTree.insert(testDaten.getUniqueInt(), "" + i);
		// }
		// redBlackTree.insert(12, "der delete"); // hier wird sichergestellt das
		// // der key für den remove
		// // vorhanden ist
		// for (int i = 0; i < anzahl / 2 - 1; i++) {
		// redBlackTree.insert(testDaten.getUniqueInt(), "" + i);
		// }

		treePrinter.setTree(redBlackTree);
		treePrinter.printTree("vor remove");
		//
//		 System.out.println("remove: "+redBlackTree.remove(13)); // hier wird removed
		//
//		 treePrinter.setTree(redBlackTree);
//		 treePrinter.printTree("nach remove");
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		new Aufgabe01();
	}
}
