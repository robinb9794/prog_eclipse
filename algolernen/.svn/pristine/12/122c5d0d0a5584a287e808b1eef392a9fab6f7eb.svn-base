package uebung11.aufgabe02;

import java.io.IOException;

import uebung11.aufgabe02.RoBDD.Func;


// Aufgabe 2: 
// Implementieren Sie für RoBDDs eine Ausgabemethode für uDrawGraph zur 
// Visualisierung. 

public class Aufgabe02 {

	Aufgabe02() throws IOException{
		RoBDD roBDD = new RoBDD();
		
		double startTime = System.currentTimeMillis();
		// zum testen...
//		Func f = roBDD.and(roBDD.genVar("x"),(roBDD.genVar("y")));
//		Func f = roBDD.and(roBDD.aequivalenz(roBDD.and(roBDD.genVar("x"), roBDD.genVar("y")),roBDD.genVar("z")),roBDD.aequivalenz(roBDD.and(roBDD.genVar("a"), roBDD.genVar("b")),roBDD.genVar("c")));
//		Func f = new FuncGen().genFunc(40, roBDD);
		
		Func x = roBDD.genVar("X");
		Func y = roBDD.genVar("Y");
		Func z = roBDD.genVar("Z");
		
		Func f = roBDD.or(x, roBDD.and(y, z));
//		Func f = roBDD.and(x, roBDD.not(x));
		
//		System.out.println(roBDD.treeDept(f));
		System.out.println("MinDepth: " + roBDD.minDepth(f));
		System.out.println("MaxDepth: " + roBDD.maxDepth(f));
		System.out.println("isSat: " + roBDD.isSat(f));
		System.out.println("zeit fuer erzeugung des RoBDD = "+(System.currentTimeMillis()-startTime));
		
		// consolenausgabe der hashmap
//		roBDD.printHashMaps();
		
		startTime = System.currentTimeMillis();
		// der printeraufruf
		RoBDD_Printer printer = new RoBDD_Printer(false, false);
		printer.print("jo",f);
		System.out.println("zeit fuer print des RoBDD = "+(System.currentTimeMillis()-startTime));
	}
	
	public static void main(String[] args) throws IOException {
		new Aufgabe02();
	}
}
