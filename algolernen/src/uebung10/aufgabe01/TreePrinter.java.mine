package uebung10.aufgabe01;

import java.io.IOException;

public class TreePrinter {

	PatriciaTree_noNH_wM patriciaTree = null;
	UDrawGraphClient client = null;
	public boolean ready = false;

	// Construktor
	public TreePrinter(boolean console, boolean bat) throws IOException {
		client = new UDrawGraphClient(console,bat);
	}

	public void setTree(PatriciaTree_noNH_wM patriciaTree) {
		this.patriciaTree = patriciaTree;
	}

	// Methoden
	public void printTree(String title) throws IOException {
		print(title);
	}

	// print rb-tree with uDrawGraph
	// --------------------------------------------------
	private void print(String title) throws IOException {
		ready = false;
		client.newContext(title);
		if (patriciaTree.m_Root == null)
			return;
		print(patriciaTree.m_Root, patriciaTree.m_Root);
		ready = true;
	}

	private void print(Node node, Node vater) throws IOException {
		client.newNode(node);
		if (node.m_Left != null && node.m_Left == node) {
			client.newEdgeLeft(node, node);
		}
		if (node.m_Right != null && node.m_Right == node) {
			client.newEdgeRight(node, node);
		}
		if (vater.m_Left != null && vater.m_Left == node) {
			client.newEdgeLeft(vater, node);
		}
		if (vater.m_Right != null && vater.m_Right == node) {
			client.newEdgeRight(vater, node);
		}
		if (node.m_Left != null && node.m_Left.m_BitPos < node.m_BitPos) {
			client.newEdgeLeft(node, node.m_Left);
		}
		if (node.m_Right != null && node.m_Right.m_BitPos < node.m_BitPos) {
			client.newEdgeRight(node, node.m_Right);
		}
		if (node.m_Left != null && node.m_Left.m_BitPos > node.m_BitPos) {
			print(node.m_Left, node);
		}
		if (node.m_Right != null && node.m_Right.m_BitPos > node.m_BitPos) {
			print(node.m_Right, node);
		}
		client.improve();
	}
}
