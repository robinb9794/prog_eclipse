1.1 b)

Frage:

Gibt es Unterschiede, wenn Sie die Threads direkt oder über einen ExecutorService erzeugen
bzw. starten?

Antwort:

Innerhalb der verschiedenen ExecutorServices gibt es keine großen Unterschiede. Der einzige Service, der bis RUNS*INCREMENTERS hochzählt, ist der 
'SingleThreadExecutor'. Platz 2 teilen sich der 'FixedThreadPool' und der 'ScheduledThreadPool' und mit dem größten Abstand auf Platz 3 befindet 
sich der 'CachedThreadPool'. 

____________

Frage:

Arbeitet Ihr Programm unter Verwendung der Wrapper-Klasse MyLong im Unterschied zu der
Version aus der Vorlesung jetzt immer korrekt? Warum?

Antwort:

Nein, zu 100% läuft das Programm immer noch nicht korrekt. Im Code aus der Vorlesung haben wir nur 'counter++' verwendet, doch wie wir herausgefunden haben,
läuft dieser einfache Befehl nicht atomar ab, sprich anstatt dass 'counter' nur erhöht wird, läuft das auf der Bytecode-Ebene so ab:

1. Der Wert der Klassenvariablen count wird geholt
2. Die Konstante 1 wird bereitgelegt
3. Variablenwert und Konstante werden mit einer Integer-Addition verknüpft 
4. Die Summe wird wieder in die Klassenvariable count geschrieben

Die Wahrscheinlichkeit ist nicht hoch, dass sich einige Threads dabei in die Quere kommen, doch es ist passiert. Nun wurde eine Wrapper-Klasse mit einem Interface 
benutzt, um 'counter' zu erhöhen und zurückzugeben. Ich denke, dass der Aufruf der 'incrementAndGet'-Methode noch mehr Schritte auf der Bytecode-Ebene benötigt 
und somit die Chance geringer ist, dass sich Threads in die Quere kommen, sodass weiter bis RUNS*INCREMENTERS gezählt werden kann.

________________________________________________________________________________

1.1 c)

Frage:

Erweitern Sie MyLong zu MyLongAtomic und verwenden Sie dort statt einer long-Variablen
eine Instanz der Klasse java.util.concurrent.atomic.AtomicLong. Testen Sie wie in Aufgabenteil b wieder die Ausf¨uhrung ¨uber direkte Threads und ¨uber
ExecutorService.
Arbeitet Ihr Programm jetzt immer korrekt? Warum?

Antwort:

Ja, das Programm läuft jetzt immer korrekt - mit direkten und auch mit ExecutorServices, da AtomicLong dafür sorgt, dass 'counter' atomar erhöht wird.